{
    "changeLanguageButton.language.en": "English",
    "changeLanguageButton.language.ru": "Russian",

    "navbar.link.docs": "Docs",
    "navbar.link.blog": "Blog",

    "hero.subtitle.theFramework": "The framework for web user interfaces",
    "hero.button.learnCoreact": "Learn Coreact",
    "hero.button.readBlog": "Read Blog",

    "welcome.title.welcome": "Welcome to the Coreact community",
    "welcome.button.getStarted": "Get Started",

    "docsSidebar.link.overview": "Overview",
    "docsSidebar.header.coreModules": "CORE MODULES",
    "docsSidebar.link.rendering": "Rendering",
    "docsSidebar.link.styling": "Styling",
    "docsSidebar.link.stateManagement": "State Management",
    "docsSidebar.link.routing": "Routing",

    "blogBreadcrumb.link.home": "Home",
    "blogBreadcrumb.link.blog": "Blog",

    "section.state.title": "State Management Basics",
    "section.state.firstDescription": "Learn how to use local component state to build interactive UI elements. This example features a simple toggle switch that updates its display based on internal state.",
    "section.state.secondDescription": "With Coreact, managing component state is effortless and intuitive. Enjoy a seamless developer experience that lets you focus on building great features, not boilerplate code.",

    "section.effect.title": "Side Effects in Components",
    "section.effect.firstDescription": "See how to handle side effects in your components using effect hooks. This example implements a live clock that updates every second, demonstrating how to synchronize your UI with external events.",
    "section.effect.secondDescription": "Experience the power of predictable, declarative side effects—making even complex UI updates feel simple. The Coreact’s hooks system keeps your code clean, maintainable, and easy to reason about.",

    "section.store.title": "Shared State with Stores",
    "section.store.firstDescription": "Discover how to manage and share state across multiple components using a store. This example features several counters that all update a shared sum, illustrating the power of centralized state management.",
    "section.store.secondDescription": "Unlock scalable architecture with built-in store support. Effortlessly share and synchronize state across your app, empowering you to build robust, high-performance interfaces with confidence.",

    "notFoundPage.link.home": "Home",
    "notFoundPage.heading.notFound": "Not Found",
    "notFoundPage.text.thisPage": "This page doesn’t exist.",

    "introducingCoreact.articleTitle": "Introducing Coreact",
    "introducingCoreact.heading.title": "Introducing Coreact: A New Way to Build Web Apps",
    "introducingCoreact.badge.announcement": "announcement",
    "introducingCoreact.badge.release": "release",
    "introducingCoreact.heading.welcome": "Welcome to Coreact",
    "introducingCoreact.paragraph.intro": "I'm thrilled to introduce Coreact, a new framework designed to make web development more intuitive and efficient. Coreact combines the best parts of modern web frameworks with a focus on performance and developer experience.",
    "introducingCoreact.heading.why": "Why Coreact?",
    "introducingCoreact.paragraph.whyIntro": "I built Coreact with several key principles in mind:",
    "introducingCoreact.list.performance.title": "Performance:",
    "introducingCoreact.list.performance.desc": "Built with performance in mind from the ground up",
    "introducingCoreact.list.simplicity.title": "Simplicity:",
    "introducingCoreact.list.simplicity.desc": "Intuitive API that's easy to learn",
    "introducingCoreact.list.flexibility.title": "Flexibility:",
    "introducingCoreact.list.flexibility.desc": "Build anything from simple websites to complex applications",
    "introducingCoreact.list.modern.title": "Modern:",
    "introducingCoreact.list.modern.desc": "Uses the latest web standards and best practices",
    "introducingCoreact.heading.gettingStarted": "Getting Started",
    "introducingCoreact.paragraph.gettingStarted": "To get started with Coreact, check out this documentation. I can't wait to see what you'll build!",
    "introducingCoreact.heading.whatsNext": "What's Next?",
    "introducingCoreact.paragraph.whatsNext": "I have an exciting roadmap ahead, with plans for server-side rendering, static site generation, and more. Stay tuned for updates!",
    "introducingCoreact.link.backToBlog": "Back to Blog",

    "coreactPerfOpt.articleTitle": "Optimizing Performance in Coreact",
    "coreactPerfOpt.heading.title": "Optimizing Performance in Coreact: Built for Speed",
    "coreactPerfOpt.badge.performance": "performance",
    "coreactPerfOpt.badge.framework": "framework",
    "coreactPerfOpt.heading.philosophy": "Coreact's Performance Philosophy",
    "coreactPerfOpt.paragraph.intro": "At the heart of Coreact is a commitment to performance. Unlike other frameworks that add optimization as an afterthought, Coreact was designed from the ground up with speed and efficiency in mind. Here's how it was achieved:",
    "coreactPerfOpt.h3.virtualDom": "1. Lightweight Virtual DOM",
    "coreactPerfOpt.paragraph.virtualDom": "Coreact's Virtual DOM implementation is incredibly lightweight, focusing on minimal overhead and maximum efficiency. The reconciliation algorithm is optimized for common update patterns, reducing unnecessary DOM operations.",
    "coreactPerfOpt.h3.stateManagement": "2. Efficient State Management",
    "coreactPerfOpt.paragraph.stateManagement": "The useState hook in Coreact is designed to minimize re-renders. State updates are batched and optimized to prevent unnecessary component updates.",
    "coreactPerfOpt.h3.treeShaking": "3. Tree Shaking Support",
    "coreactPerfOpt.paragraph.treeShaking": "Coreact's modular architecture works seamlessly with modern bundlers to eliminate dead code. This means your production bundle only includes the parts of Coreact that your application actually uses.",
    "coreactPerfOpt.h3.memoryManagement": "4. Memory Management",
    "coreactPerfOpt.paragraph.memoryManagement": "Coreact includes a smart memory management system that helps prevent memory leaks. Event listeners and subscriptions are automatically cleaned up when components unmount.",
    "coreactPerfOpt.h3.eventHandling": "5. Optimized Event Handling",
    "coreactPerfOpt.paragraph.eventHandling": "Event delegation is used under the hood to minimize the number of event listeners, resulting in better memory usage and performance, especially for large lists or interactive elements.",
    "coreactPerfOpt.heading.realWorld": "Real-World Performance",
    "coreactPerfOpt.paragraph.realWorld": "In benchmark tests, Coreact consistently outperforms larger frameworks in key metrics:",
    "coreactPerfOpt.list.smallerBundle": "Smaller bundle size",
    "coreactPerfOpt.list.fasterRender": "Faster initial render times",
    "coreactPerfOpt.list.lowerMemory": "Lower memory footprint",
    "coreactPerfOpt.list.efficientUpdates": "More efficient updates",
    "coreactPerfOpt.heading.bestPractices": "Best Practices for Maximum Performance",
    "coreactPerfOpt.h3.minimizeRerenders": "1. Minimize Re-renders",
    "coreactPerfOpt.paragraph.minimizeRerenders": "Structure your components and state to avoid unnecessary re-renders. Lift state up only when needed and use local state for isolated updates.",
    "coreactPerfOpt.h3.optimizeStructure": "2. Optimize Component Structure",
    "coreactPerfOpt.paragraph.optimizeStructure": "Keep components small and focused. This allows Coreact's reconciliation algorithm to work more efficiently.",
    "coreactPerfOpt.h3.lazyLoading": "3. Lazy Loading",
    "coreactPerfOpt.paragraph.lazyLoading": "Use dynamic imports to split your code and load components only when they're needed.",
    "coreactPerfOpt.link.backToBlog": "Back to Blog",

    "whyIBuilt.articleTitle": "Why I Built This Framework",
    "whyIBuilt.heading.title": "Why I Built This Framework",
    "whyIBuilt.badge.state": "state",
    "whyIBuilt.badge.framework": "framework",
    "whyIBuilt.paragraph.intro1": "When I started building modern web apps, I loved the power of React and the ecosystem around it — but over time, I noticed patterns repeating. Boilerplate piled up. Tooling slowed down. And I found myself reaching for lighter solutions that were just... easier to reason about.",
    "whyIBuilt.paragraph.intro2": "So I asked myself: what if I could distill the frontend development experience down to its essentials?",
    "whyIBuilt.paragraph.intro3": "That question led to this framework.",
    "whyIBuilt.heading.simplicity": "Simplicity First",
    "whyIBuilt.paragraph.simplicity1": "I believe most SPAs don’t need 1,000+ dependencies, endless Babel configs, or a mile-long webpack file.",
    "whyIBuilt.paragraph.simplicity2": "My framework provides:",
    "whyIBuilt.list.components": "Components via plain functions and JSX",
    "whyIBuilt.list.styling": "First-class styling with Tailwind-style utility classes",
    "whyIBuilt.list.state": "Built-in global state management",
    "whyIBuilt.list.router": "Lightweight router powered by the History API",
    "whyIBuilt.paragraph.simplicity3": "All with near-zero configuration and a simple file structure.",
    "whyIBuilt.heading.familiarTools": "Built on Familiar Tools",
    "whyIBuilt.paragraph.familiarTools1": "I didn’t reinvent the wheel. I leaned into tools developers already love:",
    "whyIBuilt.list.vite": "Vite for instant feedback and fast builds",
    "whyIBuilt.list.ts": "TypeScript for safety without compromise",
    "whyIBuilt.list.jsx": "JSX for expressive, declarative UI",
    "whyIBuilt.paragraph.familiarTools2": "You get a familiar developer experience without the overhead.",
    "whyIBuilt.heading.whosItFor": "Who’s It For?",
    "whyIBuilt.paragraph.whosItFor1": "This framework is perfect if you want to:",
    "whyIBuilt.list.learnFrontend": "Learn frontend fundamentals without framework complexity",
    "whyIBuilt.list.internalTools": "Build internal tools, dashboards, or lightweight SPAs",
    "whyIBuilt.list.fullControl": "Create something fast, with full control and zero fluff",
    "whyIBuilt.paragraph.whosItFor2": "I hope you enjoy using it as much as I’ve enjoyed building it.",
    "whyIBuilt.link.backToBlog": "Back to Blog",

    "docsPage.heading.gettingStarted": "Getting Started",
    "docsPage.paragraph.welcome": "Welcome to the official documentation of this frontend framework. This guide is your entry point to building modern web applications with a clear separation of logic and layout, component-based rendering, and built-in support for styling, routing, and state management.",
    "docsPage.paragraph.frameworkDescription": "Whether you're building a single-page app (SPA), a dashboard, or a static marketing site, this framework provides you with the essential tools without the bloat.",
    "docsPage.heading.installation": "Installation",
    "docsPage.paragraph.installation": "To begin using the framework, clone the repository and install dependencies using the following commands:",
    "docsPage.paragraph.developmentServer": "This will start the development server and automatically reload the browser when you make changes. The framework is powered by modern tooling (Vite, TypeScript), enabling blazing-fast builds and efficient development cycles.",
    "docsPage.heading.projectStructure": "Project Structure",
    "docsPage.paragraph.projectStructure": "User-defined application code lives in the `/src/app` directory. All other folders house internal runtime logic or auto-generated code and should not be modified manually.",
    "docsPage.paragraph.separationOfLogic": "This clear separation allows you to upgrade framework internals independently of your own project logic and maintain a clean development environment.",
    "docsPage.heading.whatsNext": "What's Next?",
    "docsPage.paragraph.exploreCoreModules": "Explore the core modules of the framework:",
    "docsPage.link.rendering": "Rendering",
    "docsPage.link.renderingDescription": "Build components and interact with JSX.",
    "docsPage.link.styling": "Styling",
    "docsPage.link.stylingDescription": "Use utility-first classes like Tailwind.",
    "docsPage.link.stateManagement": "State Management",
    "docsPage.link.stateManagementDescription": "Share reactive state across your app.",
    "docsPage.link.routing": "Routing",
    "docsPage.link.routingDescription": "Enable dynamic, client-side navigation.",
    "docsPage.link.nextRendering": "Next: Rendering",

    "blogPage.heading.title": "Blog",
    "blogPage.paragraph.intro": "Read the latest news, tutorials, and deep dives into the Coreact framework.",
    "blogPage.article.performance.title": "Coreact Performance Optimization",
    "blogPage.article.performance.summary": "Tips for squeezing maximum speed and efficiency out of your Coreact apps.",
    "blogPage.article.performance.tag1": "performance",
    "blogPage.article.performance.tag2": "optimization",
    "blogPage.article.whyBuilt.title": "Why I Built This Framework",
    "blogPage.article.whyBuilt.summary": "A look at the motivations and vision behind Coreact.",
    "blogPage.article.whyBuilt.tag1": "motivation",
    "blogPage.article.whyBuilt.tag2": "design",
    "blogPage.article.introducing.title": "Introducing Coreact: A New Way to Build Web Apps",
    "blogPage.article.introducing.summary": "I am excited to announce the release of Coreact, a modern framework for building web applications with a focus on performance and developer experience.",
    "blogPage.article.introducing.tag1": "announcement",
    "blogPage.article.introducing.tag2": "release",

    "docsRendering.heading.title": "Rendering",
    "docsRendering.paragraph.intro": "The rendering module is the heart of the framework. It allows you to write components in a declarative style using JSX, making your UI logic expressive and intuitive.",
    "docsRendering.heading.definingComponents": "Defining Components",
    "docsRendering.paragraph.definingComponents": "A component is a JavaScript (or TypeScript) function that returns JSX. It's a reusable building block that defines how your interface should look and behave.",
    "docsRendering.paragraph.noClassSyntax": "There is no class-based syntax or complex lifecycle model. Just write functions that describe UI elements.",
    "docsRendering.paragraph.nesting": "Components can be nested, passed props, or conditionally rendered. If you've used React, you'll feel right at home.",
    "docsRendering.heading.conditionalRendering": "Conditional Rendering",
    "docsRendering.paragraph.conditionalRendering": "Conditional rendering is useful for toggling UI content based on application logic, user actions, or state changes.",
    "docsRendering.paragraph.conditionalRendering2": "This lets you show or hide sections of your app without managing display styles manually. It's especially useful for authentication flows, loading indicators, and UI personalization.",
    "docsRendering.heading.useState": "useState Hook",
    "docsRendering.paragraph.useState": "The useState hook is the simplest way to add interactivity to your components. It returns a state value and a setter to update it.",
    "docsRendering.paragraph.useState2": "Each time you call setCount, the component re-renders with the new value. This makes useState ideal for tracking local UI values like form inputs, toggle switches, or counters.",
    "docsRendering.heading.useEffect": "useEffect Hook",
    "docsRendering.paragraph.useEffect": "The useEffect hook lets you perform side effects after a component renders. This includes tasks like fetching data, logging to the console, or interacting with the browser DOM.",
    "docsRendering.paragraph.useEffect2": "The hook runs after every render where dependencies (in this case value) change. Effects are isolated from rendering, so you can cleanly manage asynchronous behavior without blocking the UI.",
    "docsRendering.link.nextStyling": "Next: Styling",

    "docsRouting.heading.title": "Routing",
    "docsRouting.paragraph.intro": "Routing is a foundational feature for any single-page application (SPA). It allows you to navigate between pages, preserve application state, and deliver fast, seamless user experiences without full page reloads. This framework includes a lightweight, powerful routing system designed to be simple to use and flexible enough for real-world applications.",
    "docsRouting.heading.clientSide": "What is Client-Side Routing?",
    "docsRouting.paragraph.clientSide": "Unlike traditional websites where navigation triggers a full page reload, client-side routing updates the browser’s URL and dynamically renders the corresponding component — all within the same page. This keeps your app fast and interactive.",
    "docsRouting.paragraph.clientSide2": "For example, when a user clicks a link to `/about`, your app doesn’t reload the entire page. Instead, the router updates the browser's history and swaps out the component tree.",
    "docsRouting.heading.definingRoutes": "Defining Routes",
    "docsRouting.paragraph.definingRoutes": "To get started with routing, define a route table that maps URL paths to components. This route table acts as the blueprint for your application’s navigation:",
    "docsRouting.paragraph.createRouter": "Then use createRouter() to create a reactive router instance that listens for changes and renders the appropriate page:",
    "docsRouting.paragraph.currentPage": "Place <CurrentPage /> wherever you want your routed views to appear — usually within your main layout component.",
    "docsRouting.heading.programmatic": "Navigating Programmatically",
    "docsRouting.paragraph.programmatic": "You can trigger navigation from anywhere in your app using the navigate() function. This is useful for form submissions, button clicks, or redirect logic after an action:",
    "docsRouting.paragraph.programmatic2": "This updates the URL and renders the new route without a reload. It's fast and maintains the state of other components.",
    "docsRouting.heading.links": "Navigation Links",
    "docsRouting.paragraph.links": "For standard navigation between pages, use the built-in `Link` component. This works similarly to an `<a>` tag but uses the framework's internal routing to avoid full reloads.",
    "docsRouting.paragraph.links2": "`Link` ensures that the browser history is updated correctly, scroll positions are preserved, and transitions feel instant. It's the preferred way to build menus, tab bars, and inline navigation.",
    "docsRouting.heading.dynamic": "Dynamic Parameters",
    "docsRouting.paragraph.dynamic": "Sometimes, you'll want to match routes with variable segments — for example, viewing a user profile by ID. You can define dynamic paths like this:",
    "docsRouting.paragraph.useParams": "To access the `:id` parameter inside the `UserProfile` component, use the `useParams()` hook:",
    "docsRouting.paragraph.useParams2": "This makes it easy to build pages like `/products/:slug`, `/posts/:id`, or any route that depends on dynamic input.",
    "docsRouting.heading.tips": "Tips for Effective Routing",
    "docsRouting.list.useLink": "Always use the `Link` component instead of `<a>` for internal navigation.",
    "docsRouting.list.groupRoutes": "Group related routes and components logically to keep code organized.",
    "docsRouting.list.dynamicParams": "Use dynamic parameters sparingly and validate them if pulling from external data.",
    "docsRouting.list.wrapRouter": "Wrap your router in layout components to maintain consistent structure across pages.",
    "docsRouting.link.backOverview": "Back to Overview",

    "docsState.heading.title": "State Management",
    "docsState.paragraph.intro": "While useState is great for managing local, per-component data, real-world applications often need global state—data that needs to be accessed and updated across multiple, possibly unrelated components.",
    "docsState.heading.whyGlobal": "Why Global State?",
    "docsState.paragraph.scenarios": "Consider the following scenarios:",
    "docsState.list.sidebar": "Opening a sidebar from a button in the header and closing it from within the sidebar itself.",
    "docsState.list.auth": "Managing user authentication state across multiple components.",
    "docsState.list.cart": "Maintaining shopping cart contents while navigating between pages.",
    "docsState.paragraph.storeIntro": "Managing this with prop drilling or lifting state becomes complex and error-prone. This is where the framework’s store-based state management comes in.",
    "docsState.heading.createStore": "Creating a Store",
    "docsState.paragraph.createStore": "You can define a reactive global state with `createStore`:",
    "docsState.paragraph.useStore": "Then use it inside any component:",
    "docsState.paragraph.storeBehavior": "The store acts like a shared useState. Any component that calls the store hook automatically re-renders when the value changes.",
    "docsState.heading.bestPractices": "Best Practices",
    "docsState.list.globalData": "Use global state for application-wide data, not per-component UI.",
    "docsState.list.focusedStores": "Keep stores small and focused. A useUser() store for auth, useCart() for ecommerce, etc.",
    "docsState.list.customHooks": "Wrap store logic in custom hooks if you need derived state, memoization, or actions.",
    "docsState.link.nextRouting": "Next: Routing",

    "docsStyling.heading.title": "Styling",
    "docsStyling.paragraph.intro": "Styling in this framework is powered by a utility-first system inspired by Tailwind CSS. It enables developers to write expressive, low-overhead styles directly in their JSX without the need for writing or maintaining separate CSS files.",
    "docsStyling.heading.utilityFirst": "Why Utility-First Styling?",
    "docsStyling.paragraph.utilityFirst": "Traditional CSS often requires you to create and manage dozens of unique class names, maintain large stylesheets, and constantly context-switch between markup and style definitions. Utility-first CSS solves this by letting you compose styles inline using standardized utility classes.",
    "docsStyling.paragraph.insteadOf": "Instead of this:",
    "docsStyling.paragraph.writeThis": "You can write this:",
    "docsStyling.paragraph.result": "The result? Less mental overhead, smaller CSS bundles, and lightning-fast styling iterations.",
    "docsStyling.heading.commonUtilities": "Common Utility Classes",
    "docsStyling.list.typography": "Typography: text-sm, text-lg, font-semibold, leading-tight",
    "docsStyling.list.color": "Color: text-blue-600, bg-gray-100, hover:bg-blue-700, border-red-500",
    "docsStyling.list.spacing": "Spacing: m-4, mt-2, px-6, gap-4",
    "docsStyling.list.layout": "Layout: flex, grid, items-center, justify-between",
    "docsStyling.list.effects": "Effects: shadow, rounded, hover:scale-105, transition",
    "docsStyling.paragraph.combine": "You can combine these to build custom interfaces without writing any custom CSS:",
    "docsStyling.heading.responsive": "Responsive Design",
    "docsStyling.paragraph.breakpoints": "By default, utility classes apply to all screen sizes. You can prefix them with breakpoints for responsive behavior:",
    "docsStyling.paragraph.responsive": "This will display a vertical stack on mobile and switch to horizontal layout on medium and larger screens.",
    "docsStyling.heading.theming": "Theming and Defaults",
    "docsStyling.paragraph.defaultStyles": "Default styles are preloaded from `/src/styles` and include:",
    "docsStyling.list.preflight": "CSS Preflight (reset styles)",
    "docsStyling.list.themeVars": "Root theme variables (colors, spacing, fonts)",
    "docsStyling.paragraph.customize": "These can be customized or extended to reflect your brand identity or design system.",
    "docsStyling.link.nextState": "Next: State Management"
}
