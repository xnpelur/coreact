// src/main.ts
import { App } from "@/app/index";
import { mount } from "@/runtime/dom";
import { createElement } from "@/runtime/jsx-runtime";
import "@/styles/index.css";
import "@/styles/generated.css";
function mountApp() {
    const root = document.getElementById("app");
    const isDarkMode = localStorage.getItem("dark-mode");
    if (isDarkMode === null) {
        const isSystemDarkMode = window.matchMedia(
            "(prefers-color-scheme: dark)"
        ).matches;
        localStorage.setItem("dark-mode", String(isSystemDarkMode));
        document.documentElement.classList.toggle("dark", isSystemDarkMode);
    } else {
        document.documentElement.classList.toggle(
            "dark",
            isDarkMode === "true"
        );
    }
    if (root) {
        while (root.firstChild) {
            root.removeChild(root.firstChild);
        }
        const app = createElement(App, {});
        mount(app, root);
    }
}
window.addEventListener("router-update", () => {
    mountApp();
});
mountApp();

// src/app/index.tsx
import { createElement, VirtualNode } from "@/runtime/jsx-runtime";
import { Router, createRouter } from "@/runtime/router";
import { HomePage } from "@/app/pages/home-page";
import { NotFoundPage } from "@/app/pages/not-found-page";
import { DocsPage } from "@/app/pages/docs-page";
import { BlogPage } from "@/app/pages/blog-page";
import { IntroducingCoreactPost } from "@/app/pages/blog/introducing-coreact";
import { WhyIBuiltThisFrameworkPost } from "@/app/pages/blog/why-i-built-this-framework";
import { CoreactPerformanceOptimizationPost } from "@/app/pages/blog/coreact-performance-optimization";
import { DocsRenderingPage } from "@/app/pages/docs/docs-rendering";
import { DocsStylingPage } from "@/app/pages/docs/docs-styling";
import { DocsStateManagementPage } from "@/app/pages/docs/docs-state-management";
import { DocsRoutingPage } from "@/app/pages/docs/docs-routing";
import "@/app/styles.css";
import { registerTranslations } from "@/runtime/hooks/translation";
import en from "@/app/translations/en.json";
import ru from "@/app/translations/ru.json";
const language = localStorage.getItem("language") ?? "en";
localStorage.setItem("language", language);
registerTranslations({ en, ru }, language);
createRouter({
    routes: [
        { path: "/", component: HomePage },
        { path: "/docs", component: DocsPage },
        { path: "/blog", component: BlogPage },
        {
            path: "/blog/introducing-coreact",
            component: IntroducingCoreactPost,
        },
        {
            path: "/blog/why-i-built-this-framework",
            component: WhyIBuiltThisFrameworkPost,
        },
        {
            path: "/blog/performance-optimization",
            component: CoreactPerformanceOptimizationPost,
        },
        { path: "/docs/rendering", component: DocsRenderingPage },
        { path: "/docs/styling", component: DocsStylingPage },
        {
            path: "/docs/state-management",
            component: DocsStateManagementPage,
        },
        { path: "/docs/routing", component: DocsRoutingPage },
    ],
    notFound: NotFoundPage,
});
export function App(): VirtualNode {
    return <Router />;
}

// src/runtime/dom.ts
import {
    Fragment,
    isElement,
    isText,
    Props,
    VirtualNode,
} from "@/runtime/jsx-runtime";
import { reconcile } from "@/runtime/reconciliation";
import { resetHookIndices } from "@/runtime/hooks/state";
import { clearEffects } from "@/runtime/hooks/effect";
import { clearStores } from "@/runtime/store";
import {
    clearContext,
    context,
    Context,
    ContextMap,
    setContext,
} from "@/runtime/context";
type DOMNode = HTMLElement | Text;
const componentsVirtualNodes = new ContextMap<VirtualNode>();
export function mount(
    vnode: VirtualNode,
    parent: HTMLElement,
    index?: number,
    inSVG: boolean = false
) {
    const rendered = render(vnode, parent, index ?? 0, inSVG);
    let child: Element | undefined;
    if (index !== undefined) {
        child = parent.children[index];
    }
    rendered.forEach((element) => {
        if (child) {
            parent.insertBefore(element, child);
        } else {
            parent.appendChild(element);
        }
    });
}
export function unmount(vnode: VirtualNode, keepEffects: boolean = false) {
    if (!isElement(vnode)) {
        return;
    }
    if (
        typeof vnode.tag === "function" &&
        vnode.componentInstance?.node?.element
    ) {
        const element = vnode.componentInstance.node.element;
        if (!element.parentElement) {
            throw new Error(
                "Unmounted element should always have parent element"
            );
        }
        const parentElement = element.parentElement;
        const parentChildren = Array.from(parentElement.children);
        const index = parentChildren.findIndex((value) => value === element);
        if (!keepEffects) {
            setContext(parentElement, index);
            clearEffects();
            clearStores();
            clearContext();
        }
    }
    if (vnode.element) {
        vnode.element.remove();
    }
    if (vnode.componentInstance) {
        unmount(vnode.componentInstance.node, keepEffects);
    } else {
        vnode.children.forEach((child) => unmount(child, keepEffects));
    }
}
export function rerender(componentContext: Context) {
    const vnode = componentsVirtualNodes.get(componentContext);
    if (!isElement(vnode)) {
        throw new Error("Component not found");
    }
    const oldComponentNode = vnode.componentInstance?.node;
    setContext(componentContext.parentElement, componentContext.index);
    resetHookIndices();
    const Component = vnode.tag as Function;
    const newComponentNode = Component(vnode.props);
    vnode.componentInstance = {
        node: newComponentNode,
    };
    componentsVirtualNodes.set(context!, vnode);
    clearContext();
    if (oldComponentNode) {
        reconcile(
            oldComponentNode,
            newComponentNode,
            componentContext.parentElement,
            componentContext.index,
            mount,
            unmount
        );
    } else {
        mount(
            newComponentNode,
            componentContext.parentElement,
            componentContext.index
        );
    }
}
function render(
    vnode: VirtualNode,
    parentElement: HTMLElement,
    index: number,
    inSVG: boolean = false
): DOMNode[] {
    if (typeof vnode === "boolean" || vnode === null || vnode === undefined) {
        return [];
    }
    if (isText(vnode)) {
        vnode.element = document.createTextNode(vnode.value);
        return [vnode.element];
    }
    if (vnode.tag === Fragment) {
        const rendered: DOMNode[] = [];
        vnode.children.forEach((child, childIndex) => {
            const renderedPart = render(
                child,
                parentElement,
                childIndex,
                inSVG
            );
            rendered.push(...renderedPart);
        });
        return rendered;
    }
    if (typeof vnode.tag === "string") {
        const isSVG = inSVG || vnode.tag === "svg";
        let element: HTMLElement;
        if (isSVG) {
            element = document.createElementNS(
                "http:
                vnode.tag
            ) as unknown as HTMLElement;
        } else {
            element = document.createElement(vnode.tag);
        }
        setProps(element, vnode.props);
        vnode.children.forEach((child, childIndex) => {
            mount(child, element, childIndex, isSVG);
        });
        vnode.element = element;
        return [element];
    }
    const Component = vnode.tag;
    setContext(parentElement, index);
    resetHookIndices();
    vnode.props.children = vnode.children;
    const componentNode = Component(vnode.props);
    componentsVirtualNodes.set(context!, vnode);
    clearContext();
    vnode.componentInstance = {
        node: componentNode,
    };
    return render(componentNode, parentElement, index, inSVG);
}
function setProps(element: HTMLElement, props: Props) {
    Object.entries(props).forEach(([key, value]) => {
        if (key.startsWith("on") && typeof value === "function") {
            const eventName = key.toLowerCase().substring(2);
            element.addEventListener(eventName, value);
        } else if (key === "value" && element instanceof HTMLInputElement) {
            element.value = value as string;
        } else if (key === "className" && typeof value === "string") {
            element.setAttribute("class", value);
        } else if (key === "style" && typeof value === "object") {
            Object.entries(value).forEach(([styleName, styleValue]) => {
                element.style[styleName as any] = styleValue as string;
            });
        } else {
            element.setAttribute(key, value);
        }
    });
}

// src/runtime/reconciliation.ts
import { isElement, isText, Props, VirtualNode } from "@/runtime/jsx-runtime";
export function reconcile(
    oldNode: VirtualNode,
    newNode: VirtualNode,
    parentElement: HTMLElement,
    index: number,
    mount: (vnode: VirtualNode, parent: HTMLElement, index?: number) => void,
    unmount: (vnode: VirtualNode, keepEffects: boolean) => void
): void {
    if (!isSameNode(oldNode, newNode)) {
        unmount(oldNode, true);
        mount(newNode, parentElement, index);
        return;
    }
    if (isText(oldNode) && isText(newNode)) {
        if (oldNode.element) {
            oldNode.element.nodeValue = newNode.value;
            newNode.element = oldNode.element;
        }
        return;
    }
    if (isElement(oldNode) && isElement(newNode)) {
        if (oldNode.element) {
            newNode.element = oldNode.element;
            if (
                typeof oldNode.tag === "string" &&
                typeof newNode.tag === "string"
            ) {
                updateProps(oldNode.element, oldNode.props, newNode.props);
                reconcileChildren(
                    oldNode.element,
                    oldNode.children,
                    newNode.children,
                    mount,
                    unmount
                );
            }
        }
        if (
            typeof oldNode.tag === "function" &&
            typeof newNode.tag === "function"
        ) {
            unmount(oldNode, true);
            mount(newNode, parentElement, index);
        }
    }
}
function isSameNode(oldNode: VirtualNode, newNode: VirtualNode): boolean {
    if (oldNode === null || newNode === null) {
        return oldNode === newNode;
    }
    if (isText(oldNode) && isText(newNode)) {
        return true;
    }
    if (isElement(oldNode) && isElement(newNode)) {
        const oldKey = oldNode.props && oldNode.props.key;
        const newKey = newNode.props && newNode.props.key;
        if (oldKey !== undefined || newKey !== undefined) {
            return oldKey === newKey;
        }
        if (typeof oldNode.tag !== typeof newNode.tag) {
            return false;
        }
        if (
            typeof oldNode.tag === "string" &&
            typeof newNode.tag === "string"
        ) {
            return oldNode.tag === newNode.tag;
        }
        if (
            typeof oldNode.tag === "function" &&
            typeof newNode.tag === "function"
        ) {
            return oldNode.tag === newNode.tag;
        }
    }
    return false;
}
function updateProps(
    element: HTMLElement,
    oldProps: Props,
    newProps: Props
): void {
    Object.keys(oldProps).forEach((key) => {
        if (key.startsWith("on") && typeof oldProps[key] === "function") {
            const eventName = key.toLowerCase().substring(2);
            element.removeEventListener(eventName, oldProps[key]);
        } else if (!(key in newProps)) {
            element.removeAttribute(key);
        }
    });
    Object.entries(newProps).forEach(([key, value]) => {
        if (oldProps[key] === value) {
            return;
        }
        if (key.startsWith("on") && typeof value === "function") {
            const eventName = key.toLowerCase().substring(2);
            if (typeof oldProps[key] === "function") {
                element.removeEventListener(eventName, oldProps[key]);
            }
            element.addEventListener(eventName, value);
        } else {
            if (key === "value" && element instanceof HTMLInputElement) {
                const inputElement = element as HTMLInputElement;
                const selectionStart = inputElement.selectionStart;
                const selectionEnd = inputElement.selectionEnd;
                const selectionDirection = inputElement.selectionDirection;
                if (inputElement.value !== value) {
                    inputElement.value = value as string;
                }
                if (
                    document.activeElement === inputElement &&
                    selectionStart !== null &&
                    selectionEnd !== null
                ) {
                    inputElement.setSelectionRange(
                        selectionStart,
                        selectionEnd,
                        selectionDirection || undefined
                    );
                }
            } else {
                element.setAttribute(key, value as string);
            }
        }
    });
}
function reconcileChildren(
    parentElement: HTMLElement,
    oldChildren: VirtualNode[],
    newChildren: VirtualNode[],
    mount: (vnode: VirtualNode, parent: HTMLElement, index?: number) => void,
    unmount: (vnode: VirtualNode, keepEffects: boolean) => void
): void {
    const maxLength = Math.max(oldChildren.length, newChildren.length);
    for (let i = 0; i < maxLength; i++) {
        const oldChild = oldChildren[i];
        const newChild = newChildren[i];
        if (oldChild && !newChild) {
            if (isElement(oldChild) && oldChild.element) {
                oldChild.element.remove();
            } else if (isText(oldChild) && oldChild.element) {
                oldChild.element.remove();
            }
        } else if (!oldChild && newChild) {
        } else if (oldChild && newChild) {
            reconcile(oldChild, newChild, parentElement, i, mount, unmount);
        }
    }
}

// src/runtime/jsx-runtime.ts
export type Props = Record<string, any>;
export type VirtualNode =
    | VirtualElement
    | VirtualText
    | boolean
    | null
    | undefined;
export type VirtualText = {
    value: string;
    element: Text | null;
};
export type VirtualElement = {
    tag: string | Function;
    props: Props;
    children: VirtualNode[];
    element: HTMLElement | null;
    componentInstance?: {
        node: VirtualElement;
    };
};
export function isText(node: VirtualNode): node is VirtualText {
    return (node as VirtualText)?.value !== undefined;
}
export function isElement(node: VirtualNode): node is VirtualElement {
    return (node as VirtualElement)?.tag !== undefined;
}
export function createElement(
    tag: string | Function,
    props: Props,
    ...children: any[]
): VirtualNode {
    return {
        tag,
        props: props || {},
        children: children.map((child) =>
            child === null ||
            child === undefined ||
            typeof child === "object" ||
            typeof child === "boolean"
                ? child
                : {
                      value: child.toString(),
                      element: null,
                  }
        ),
        element: null,
    };
}
export function Fragment(): VirtualNode {
    return null;
}

// src/runtime/router.ts
import { createElement, VirtualNode } from "@/runtime/jsx-runtime";
import { clearStoreSubscribers } from "@/runtime/store";
type RouteConfig = {
    path: string;
    component: (props: any) => VirtualNode;
    params?: Record<string, string>;
};
type RouterState = {
    routes: RouteConfig[];
    currentRoute: RouteConfig | null;
    notFoundComponent: ((props: any) => VirtualNode) | null;
};
const routerState: RouterState = {
    routes: [],
    currentRoute: null,
    notFoundComponent: null,
};
let isRouterInitialized = false;
export function createRouter(options: {
    routes: { path: string; component: (props: any) => VirtualNode }[];
    notFound?: (props: any) => VirtualNode;
}) {
    if (isRouterInitialized) {
        console.warn(
            "Router is already initialized. Skipping re-initialization."
        );
        return;
    }
    routerState.routes = options.routes;
    if (options.notFound) {
        routerState.notFoundComponent = options.notFound;
    }
    matchRoute(window.location.pathname);
    window.addEventListener("popstate", () => {
        matchRoute(window.location.pathname);
    });
    window.addEventListener("route-changed", () => {
        const event = new CustomEvent("router-update");
        window.dispatchEvent(event);
    });
    isRouterInitialized = true;
}
function matchRoute(path: string) {
    let matchedRoute = routerState.routes.find((route) => route.path === path);
    if (!matchedRoute) {
        for (const route of routerState.routes) {
            const dynamicSegments = route.path.match(/:\w+/g);
            if (dynamicSegments) {
                const pattern = route.path
                    .replace(/:\w+/g, "([^/]+)")
                    .replace(/\
                const regex = new RegExp(`^${pattern}$`);
                const match = path.match(regex);
                if (match) {
                    const params: Record<string, string> = {};
                    dynamicSegments.forEach((segment, index) => {
                        const paramName = segment.substring(1);
                        params[paramName] = match[index + 1];
                    });
                    matchedRoute = {
                        ...route,
                        params,
                    };
                    break;
                }
            }
        }
    }
    routerState.currentRoute = matchedRoute || null;
    window.dispatchEvent(new CustomEvent("route-changed"));
}
export function navigate(path: string) {
    window.history.pushState(null, "", path);
    matchRoute(path);
}
export function Link({
    href,
    children,
    ...props
}: {
    href: string;
    children?: any;
    [key: string]: any;
}): VirtualNode {
    const handleClick = (e: MouseEvent) => {
        e.preventDefault();
        navigate(href);
    };
    return createElement(
        "a",
        { href, onClick: handleClick, ...props },
        ...children
    );
}
export function useParams(): object {
    return routerState.currentRoute?.params || {};
}
export function Router(): VirtualNode {
    let vnode: VirtualNode;
    if (routerState.currentRoute) {
        vnode = createElement(
            routerState.currentRoute.component,
            routerState.currentRoute.params || {}
        );
    } else if (routerState.notFoundComponent) {
        vnode = createElement(routerState.notFoundComponent, {});
    } else {
        vnode = createElement("div", {}, "Page not found");
    }
    window.scrollTo(0, 0);
    clearStoreSubscribers();
    return vnode;
}

// src/runtime/store.ts
import { rerender } from "@/runtime/dom";
import { context, ContextMap } from "@/runtime/context";
type Store<T> = {
    state: T;
    subscribers: ContextMap<() => void>;
};
const storeRegistry: Store<any>[] = [];
export function createStore<T>(
    initialState: T
): () => [T, (newState: T) => void] {
    const store: Store<T> = {
        state: initialState,
        subscribers: new ContextMap(),
    };
    storeRegistry.push(store);
    const useStore = (): [T, (newState: T) => void] => {
        if (!context) {
            throw new Error("useStore must be called within a component");
        }
        const setState = (newState: T) => {
            store.state = newState;
            store.subscribers.values().forEach((subscriber) => subscriber());
        };
        if (store.subscribers.has(context)) {
            return [store.state, setState];
        }
        const currentContext = { ...context };
        const rerenderComponent = () => {
            rerender(currentContext);
        };
        store.subscribers.set(context, rerenderComponent);
        return [store.state, setState];
    };
    return useStore;
}
export function clearStores() {
    storeRegistry.forEach((store) => {
        if (store.subscribers.has(context!)) {
            store.subscribers.delete(context!);
        }
    });
}
export function clearStoreSubscribers() {
    storeRegistry.forEach((store) => {
        store.subscribers.clear();
    });
}

// src/runtime/hooks/state.ts
import { rerender } from "@/runtime/dom";
import { context, ContextMap } from "@/runtime/context";
const stateMap = new ContextMap<any[]>();
const hookIndexMap = new ContextMap<number>();
export function useState<T>(initialValue: T): [T, (value: T) => void] {
    if (!context) {
        throw new Error("useState must be called within a component");
    }
    if (!hookIndexMap.has(context)) {
        hookIndexMap.set(context, 0);
    }
    const hookIndex = hookIndexMap.get(context)!;
    hookIndexMap.set(context, hookIndex + 1);
    if (!stateMap.has(context)) {
        stateMap.set(context, []);
    }
    const states = stateMap.get(context)!;
    if (states.length <= hookIndex) {
        states[hookIndex] = initialValue;
    }
    const currentContext = { ...context };
    const setValue = (value: T) => {
        const states = stateMap.get(currentContext)!;
        states[hookIndex] = value;
        rerender(currentContext);
    };
    return [states[hookIndex], setValue];
}
export function clearState() {
    if (process.env.NODE_ENV !== "test") {
        throw new Error(
            "clearState function is not supposed to be used in this environment"
        );
    }
    stateMap.clear();
    hookIndexMap.clear();
}
export function resetHookIndices() {
    hookIndexMap.set(context!, 0);
}

// src/runtime/hooks/effect.ts
import { context, ContextMap } from "@/runtime/context";
const effectMap = new ContextMap<
    {
        effect: () => void | (() => void);
        deps: any[] | null;
        cleanup?: () => void;
    }[]
>();
export function useEffect(effect: () => void | (() => void), deps?: any[]) {
    if (!context) {
        throw new Error("useEffect must be called within a component");
    }
    if (!effectMap.has(context)) {
        effectMap.set(context, []);
    }
    const effectList = effectMap.get(context)!;
    const previousEffect = effectList[effectList.length - 1];
    const hasChanged =
        !previousEffect ||
        !deps ||
        !previousEffect.deps ||
        deps.some((dep, i) => dep !== previousEffect.deps![i]);
    if (hasChanged) {
        if (previousEffect?.cleanup) {
            previousEffect.cleanup();
            previousEffect.cleanup = undefined;
        }
        const cleanup = effect();
        effectList.push({
            effect,
            deps: deps ?? null,
            cleanup: cleanup ?? undefined,
        });
    }
}
export function clearEffects() {
    const effectList = effectMap.get(context!);
    if (effectList) {
        for (const effectEntry of effectList) {
            if (effectEntry.cleanup) {
                effectEntry.cleanup();
            }
        }
        effectMap.delete(context!);
    }
}

// src/runtime/tailwind.ts
const propsWithColor = {
    bg: ["background-color"],
    text: ["color"],
    border: ["border-color"],
};
const propsWithSpacing = {
    m: ["margin"],
    p: ["padding"],
    mx: ["margin-left", "margin-right"],
    my: ["margin-top", "margin-bottom"],
    px: ["padding-left", "padding-right"],
    py: ["padding-top", "padding-bottom"],
    mt: ["margin-top"],
    mr: ["margin-right"],
    mb: ["margin-bottom"],
    ml: ["margin-left"],
    pt: ["padding-top"],
    pr: ["padding-right"],
    pb: ["padding-bottom"],
    pl: ["padding-left"],
    gap: ["gap"],
    w: ["width"],
    h: ["height"],
    leading: ["line-height"],
    top: ["top"],
    right: ["right"],
    bottom: ["bottom"],
    left: ["left"],
    "min-h": ["min-height"],
    "min-w": ["min-width"],
};
const directions = {
    t: "top",
    r: "right",
    b: "bottom",
    l: "left",
};
const utilities: Record<string, Record<string, string>> = {
    block: { display: "block" },
    "inline-block": { display: "inline-block" },
    inline: { display: "inline" },
    flex: { display: "flex" },
    "inline-flex": { display: "inline-flex" },
    grid: { display: "grid" },
    hidden: { display: "none" },
    sticky: { position: "sticky" },
    absolute: { position: "absolute" },
    relative: { position: "relative" },
    fixed: { position: "fixed" },
    "flex-row": { "flex-direction": "row" },
    "flex-col": { "flex-direction": "column" },
    "flex-wrap": { "flex-wrap": "wrap" },
    "flex-nowrap": { "flex-wrap": "nowrap" },
    "justify-start": { "justify-content": "flex-start" },
    "justify-center": { "justify-content": "center" },
    "justify-end": { "justify-content": "flex-end" },
    "justify-between": { "justify-content": "space-between" },
    "justify-around": { "justify-content": "space-around" },
    "items-start": { "align-items": "flex-start" },
    "items-center": { "align-items": "center" },
    "items-end": { "align-items": "flex-end" },
    "items-stretch": { "align-items": "stretch" },
    "flex-1": { flex: "1" },
    grow: { "flex-grow": "1" },
    "self-auto": { "align-self": "auto" },
    "self-start": { "align-self": "flex-start" },
    "self-center": { "align-self": "center" },
    "self-end": { "align-self": "flex-end" },
    "self-stretch": { "align-self": "stretch" },
    "self-baseline": { "align-self": "baseline" },
    "text-left": { "text-align": "left" },
    "text-center": { "text-align": "center" },
    "text-right": { "text-align": "right" },
    "text-justify": { "text-align": "justify" },
    "overflow-hidden": { overflow: "hidden" },
    "overflow-auto": { overflow: "auto" },
    "overflow-scroll": { overflow: "scroll" },
    "overflow-x-hidden": { "overflow-x": "hidden" },
    "overflow-x-auto": { "overflow-x": "auto" },
    "overflow-x-scroll": { "overflow-x": "scroll" },
    "overflow-y-hidden": { "overflow-y": "hidden" },
    "overflow-y-auto": { "overflow-y": "auto" },
    "overflow-y-scroll": { "overflow-y": "scroll" },
    "overflow-visible": { overflow: "visible" },
    "cursor-pointer": { cursor: "pointer" },
    "cursor-default": { cursor: "default" },
    "cursor-move": { cursor: "move" },
    "cursor-grab": { cursor: "grab" },
    "font-sans": { "font-family": "var(--font-sans)" },
    "font-serif": { "font-family": "var(--font-serif)" },
    "font-mono": { "font-family": "var(--font-mono)" },
    "list-disc": { "list-style-type": "disc" },
    "list-decimal": { "list-style-type": "decimal" },
    "list-none": { "list-style-type": "none" },
    "list-inside": { "list-style-position": "inside" },
    "list-outside": { "list-style-position": "outside" },
};
function parse(className: string): [string, string][] {
    if (className in utilities) {
        return Object.entries(utilities[className]);
    }
    const spacingMatch = className.match(
        /^(-?)(m|mx|my|mt|mr|mb|ml|p|px|py|pt|pr|pb|pl|gap|w|h|leading|top|right|bottom|left|min-h|min-w)-(\d{1,2}|full|auto|screen)$/
    );
    if (spacingMatch) {
        const [, minus, prefix, value] = spacingMatch;
        if (prefix in propsWithSpacing) {
            let cssValue: string;
            if (value === "full") {
                cssValue = "100%";
            } else if (value === "auto") {
                cssValue = "auto";
            } else if (value === "screen") {
                cssValue = prefix === "w" ? "100vw" : "100vh";
            } else {
                cssValue = `calc(var(--spacing) *${
                    parseInt(value) * (minus ? -1 : 1)
                })`;
            }
            const result = [];
            for (const prop of propsWithSpacing[
                prefix as keyof typeof propsWithSpacing
            ]) {
                result.push([prop, cssValue] as [string, string]);
            }
            return result;
        }
    }
    const fontSizeMatch = className.match(
        /^text-(xs|sm|base|lg|xl|2xl|3xl|4xl|5xl|6xl|7xl|8xl|9xl)$/
    );
    if (fontSizeMatch) {
        const [, size] = fontSizeMatch;
        return [
            ["font-size", `var(--text-${size})`],
            ["line-height", `var(--text-${size}--line-height)`],
        ];
    }
    const fontWeightMatch = className.match(
        /^font-(thin|extralight|light|normal|medium|semibold|bold|extrabold|black)$/
    );
    if (fontWeightMatch) {
        const [, weight] = fontWeightMatch;
        return [["font-weight", `var(--font-weight-${weight})`]];
    }
    const lineHeightMatch = className.match(
        /^leading-(tight|snug|normal|relaxed|loose)$/
    );
    if (lineHeightMatch) {
        const [, lineHeight] = lineHeightMatch;
        return [["line-height", `var(--leading-${lineHeight})`]];
    }
    const maxWidthMatch = className.match(
        /^max-w-(\d{1,2}|3xs|2xs|xs|sm|md|lg|xl|2xl|3xl|4xl|5xl|6xl|7xl|screen|full)$/
    );
    if (maxWidthMatch) {
        const [, size] = maxWidthMatch;
        if (size === "screen") {
            return [["max-width", "100vw"]];
        } else if (size === "full") {
            return [["max-width", "100%"]];
        } else if (!isNaN(Number(size))) {
            return [["max-width", `calc(var(--spacing) * ${parseInt(size)})`]];
        }
        return [["max-width", `var(--container-${size})`]];
    }
    const borderWidthMatch = className.match(
        /^border(?:-(t|r|b|l))?(?:-(\d{1,2}))?$/
    );
    if (borderWidthMatch) {
        const [, direction, value] = borderWidthMatch;
        const cssValue = value ? `${value}px` : "1px";
        return direction
            ? [
                  [
                      `border-${
                          directions[direction as keyof typeof directions]
                      }-width`,
                      cssValue,
                  ],
              ]
            : [["border-width", cssValue]];
    }
    const borderRadiusMatch = className.match(
        /^rounded(?:-(t|r|b|l))?-(xs|sm|md|lg|xl|2xl|3xl|4xl|none|full)$/
    );
    if (borderRadiusMatch) {
        const [, side, size] = borderRadiusMatch;
        let cssValue: string;
        if (size === "none") {
            cssValue = "0";
        } else if (size === "full") {
            cssValue = "9999px";
        } else {
            cssValue = `var(--radius-${size})`;
        }
        if (side === "t") {
            return [
                ["border-top-left-radius", cssValue],
                ["border-top-right-radius", cssValue],
            ];
        } else if (side === "r") {
            return [
                ["border-top-right-radius", cssValue],
                ["border-bottom-right-radius", cssValue],
            ];
        } else if (side === "b") {
            return [
                ["border-bottom-left-radius", cssValue],
                ["border-bottom-right-radius", cssValue],
            ];
        } else if (side === "l") {
            return [
                ["border-top-left-radius", cssValue],
                ["border-bottom-left-radius", cssValue],
            ];
        }
        return [["border-radius", cssValue]];
    }
    const zIndexMatch = className.match(/^z-(\d{1,2}|auto)$/);
    if (zIndexMatch) {
        const [, value] = zIndexMatch;
        if (value === "auto") {
            return [["z-index", "auto"]];
        }
        return [["z-index", value]];
    }
    const colorMatch = className.match(
        /^([a-z]+)-([a-z]+)(?:-(\d{2,3}))?(?:\/(\d{1,3}))?$/
    );
    if (colorMatch) {
        const [, prefix, color, shade, opacity] = colorMatch;
        if (prefix in propsWithColor) {
            const colorValue = `var(--color-${color}${
                shade ? `-${shade}` : ""
            })`;
            const cssValue = opacity
                ? `color-mix(in srgb, ${colorValue} ${opacity}%, transparent)`
                : colorValue;
            const result = [];
            for (const prop of propsWithColor[
                prefix as keyof typeof propsWithColor
            ]) {
                result.push([prop, cssValue] as [string, string]);
            }
            return result;
        }
    }
    return [];
}
type ParseResult = {
    variants: string[];
    properties: [string, string][];
};
export function tw(className: string): ParseResult {
    if (className.includes(":")) {
        const parts = className.split(":");
        const actualClassName = parts.pop()!;
        const variants = parts;
        return {
            variants,
            properties: parse(actualClassName),
        };
    }
    return {
        variants: [],
        properties: parse(className),
    };
}
